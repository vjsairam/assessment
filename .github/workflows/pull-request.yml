name: Deploy to Kind Cluster

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - feature/*

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: engineerd/setup-kind@v0.5.0
        with:
          version: "v0.11.1"

      - name: Create Kind cluster
        run: |
          kind create cluster --name foobar-cluster --config create-cluster/kind-config.yaml
          export KUBECONFIG="$(kind get kubeconfig-path)"
          kubectl cluster-info
          kubectl get pods -n kube-system
          
      - name: Deploy ingress to Kind cluster
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml # Deploy the ingress files to the Kind cluster using the exported KUBECONFIG

      - name: Wait for ingress to be ready 
        run: kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=180s # Wait for the ingress to be ready in the Kind cluster

      - name: Deploy services to Kind cluster
        run: |
          kubectl get po -n kube-system 
          kubectl get po -n ingress-nginx
          kubectl apply -f deploy-services/
          sleep 20s
          kubectl get po
           
      - name: Test foo Response
        run: |
          response=$(curl -s http://foo.localhost/)
          if [[ $response == *"foo"* ]]; then
            echo "curl request succeeded with expected response: foo"
          else
            echo "curl request failed. Unexpected response received: $response"
            exit 1
          fi

      - name: Test bar Response
        run: |
          response=$(curl -s http://bar.localhost/)
          if [[ $response == *"bar"* ]]; then
            echo "curl request succeeded with expected response: bar"
          else
            echo "curl request failed. Unexpected response received: $response"
            exit 1
          fi
              
      - name: Run Load Test for foo & bar 
        if: ${{ startsWith(github.ref, 'refs/heads/feature/') }}
        run: |
          sudo apt-get install apache2-utils
          
          ab_output=$(ab -n 100 -c 10 http://foo.localhost/ 2>&1)
          average_duration=$(echo "$ab_output" | awk '/Time per request/ {print $4}' | awk -F' ' '{print $1; exit}')
          p90_duration=$(echo "$ab_output" | awk '/90% / {print $2; exit}')
          failed_requests=$(echo "$ab_output" | awk '/Failed requests/ {print $3; exit}')
          req_per_sec=$(echo "$ab_output" | awk '/Requests per second/ {print $4; exit}')
          metrics="Average Duration: $average_duration ms, 90th Percentile Duration: $p90_duration ms, Percentage of Failed Requests: $failed_requests%, Requests Per Second: $req_per_sec"
          echo "foo_load_test_report=${metrics}" >> "$GITHUB_ENV"
          echo "${{ env.foo_load_test_report }}"

          ab_output=$(ab -n 100 -c 10 http://bar.localhost/ 2>&1)
          average_duration=$(echo "$ab_output" | awk '/Time per request/ {print $4}' | awk -F' ' '{print $1; exit}')
          p90_duration=$(echo "$ab_output" | awk '/90% / {print $2; exit}')
          failed_requests=$(echo "$ab_output" | awk '/Failed requests/ {print $3; exit}')
          req_per_sec=$(echo "$ab_output" | awk '/Requests per second/ {print $4; exit}')
          metrics="Average Duration: $average_duration ms, 90th Percentile Duration: $p90_duration ms, Percentage of Failed Requests: $failed_requests%, Requests Per Second: $req_per_sec"
          echo "bar_load_test_report=${metrics}" >> "$GITHUB_ENV"
          echo "${{ env.bar_load_test_report }}"
          
      - name: Check out repository code
        if: ${{ startsWith(github.ref, 'refs/heads/feature/') }}
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: main

      - uses: repo-sync/pull-request@v2
        if: ${{ startsWith(github.ref, 'refs/heads/feature/') }}
        name: Create Pull Request
        with:
          destination_branch: ${{ github.event.repository.default_branch }}
          github_token: ${{ secrets.GH_TOKEN }}
          pr_title: "feat: Load Test Results & Merge ${{ github.ref_name }} into ${{ github.event.repository.default_branch }}"
          pr_body: |
            The load testing results for the foo service is as follows:
            
            "${{ env.foo_load_test_report }} "
            
            The load testing results for the bar service is as follows:
            
            "${{ env.bar_load_test_report }} "
            
            
